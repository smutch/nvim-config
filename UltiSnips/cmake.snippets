snippet mpi "Link against mpi"
find_package(MPI REQUIRED)
target_link_libraries($0 MPI::MPI_C)
endsnippet

snippet gsl "Link against gsl"
find_package(GSL REQUIRED)
target_link_libraries($1 GSL::gsl GSL::gslcblas)
endsnippet

snippet hdf5 "Link against hdf5"
find_package(hdf5 REQUIRED COMPONENTS C HL)
include_directories(${HDF5_INCLUDE_DIRS})
link_libraries(${HDF5_C_LIBRARIES} ${HDF5_C_HL_LIBRARIES})
add_definitions(${HDF5_DEFINITIONS})
# THIS IS A TEMPORARY HACK TO OVERCOME A BUG IN SOME VERSIONS OF CMAKE
if(NOT (${HDF5_C_HL_LIBRARIES} MATCHES "libhdf5_hl"))
    list(GET HDF5_C_LIBRARIES 0 HDF5_LIB)
    get_filename_component(HDF5_LIBDIR ${HDF5_LIB} DIRECTORY)
    link_libraries("${HDF5_LIBDIR}/libhdf5_hl.so")
endif()
endsnippet

snippet basic "A basic cmake template"
cmake_minimum_required(VERSION 3.0)
project(${1:name})

# output paths
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# write compile_commands.json file
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# compile flags
set(CMAKE_C_FLAGS_RELEASE "-O3 -march=native")

set(SRC
	src/$1.c
	)

add_executable($1 ${SRC})
set_property(TARGET $1 PROPERTY C_STANDARD 99)
endsnippet

snippet basic++ "A basic cmake template for c++"
cmake_minimum_required(VERSION 3.0)
project(${1:name})

# output paths
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# write compile_commands.json file
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# compile flags
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native")

# 3rd party libs
find_package(fmt REQUIRED)
find_package(Boost REQUIRED COMPONENTS program_options)

set(SRC
	src/$1.cpp
	)

add_executable($1 ${SRC})
set_property(TARGET $1 PROPERTY CXX_STANDARD 17)
target_link_libraries($1 PRIVATE fmt Boost::program_options)
endsnippet
