snippet mpi "Link against mpi"
find_package(MPI REQUIRED)
target_link_libraries($0 PRIVATE MPI::MPI_C)
endsnippet

snippet gsl "Link against gsl"
find_package(GSL REQUIRED)
target_link_libraries($0 PRIVATE GSL::gsl GSL::gslcblas)
endsnippet

snippet hdf5 "Link against hdf5 [OLD]"
find_package(hdf5 REQUIRED COMPONENTS C HL)
include_directories(${HDF5_INCLUDE_DIRS})
link_libraries(${HDF5_C_LIBRARIES} ${HDF5_C_HL_LIBRARIES})
add_definitions(${HDF5_DEFINITIONS})
# THIS IS A TEMPORARY HACK TO OVERCOME A BUG IN SOME VERSIONS OF CMAKE
if(NOT (${HDF5_C_HL_LIBRARIES} MATCHES "libhdf5_hl"))
    list(GET HDF5_C_LIBRARIES 0 HDF5_LIB)
    get_filename_component(HDF5_LIBDIR ${HDF5_LIB} DIRECTORY)
    link_libraries("${HDF5_LIBDIR}/libhdf5_hl.so")
endif()
endsnippet

snippet basic "A basic cmake template"
cmake_minimum_required(VERSION 3.18)
project($1 VERSION 0.1 LANGUAGES C)

# write compile_commands.json file
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Set a default build type if none was specified
set(default_build_type "Debug")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(SRC
    src/main.c
    )

add_executable($1 ${SRC})
set_property(TARGET $1 PROPERTY C_STANDARD 17)

# compile flags
target_compile_options(
    TARGET $1
    $<$<CONFIG:RELEASE>:-O3 -march=native>
    $<$<CONFIG:DEBUG>:-O0 -Wall -Werror>
    )
endsnippet

snippet basic++ "A basic cmake template for c++"
cmake_minimum_required(VERSION 3.18)
project($1 VERSION 0.1 LANGUAGES C)

# write compile_commands.json file
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Set a default build type if none was specified
set(default_build_type "Debug")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(SRC
    src/$1.cpp
    )

add_executable($1 ${SRC})
set_property(TARGET $1 PROPERTY C_STANDARD 17)

# compile flags
target_compile_options(
    TARGET assignment_tests
    $<$<CONFIG:RELEASE>:-O3 -march=native>
    $<$<CONFIG:DEBUG>:-O0 -Wall -Werror>
    )

# 3rd party libs
find_package(fmt REQUIRED)
target_link_libraries($1 PRIVATE fmt)
endsnippet
