snippet mpiinit "MPI initialisation"
int i_rank, n_rank;
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &i_${1:rank});
MPI_Comm_size(MPI_COMM_WORLD, &n_$1);
endsnippet

snippet sidlog "SID_log"
SID_log("${1:%s}", ${2:SID_LOG_COMMENT}${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet sidbcast "SID_Bcast"
SID_Bcast(${1:void *buffer}, ${2:int data_size}, ${3:int source_rank}, ${4:SID.COMM_WORLD});
endsnippet

snippet gdbmpi "GDB MPI insertion point"
{
    #include <unistd.h>
    int i = 0;
    char hostname[256];
    gethostname(hostname, sizeof(hostname));
    printf("PID %d on %s ready for attach\n", getpid(), hostname);
    printf("Once connected go up stack to 'sleep(5)' and 'set var i=7'\n");
    fflush(stdout);
    while (0 == i)
        sleep(5);
}
endsnippet

snippet h5noerror "Turn off HDF5 error reporting"
H5Eset_auto(H5P_DEFAULT, NULL, NULL);
endsnippet


snippet forii "for int (ii) loop (forii)"
for(int ${2:ii}=0; $2<${1:count}; ${3:$2++})
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet header "common c header"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
endsnippet

snippet openfile "fopen with error check"
FILE *${1:fin};
if(($1 = fopen(${2:fname}, ${3:"rb"})) == NULL)
{
  fprintf(stderr, "Failed to open file: %s\n", $2);
  ${4:return EXIT_FAILURE};
}
endsnippet

